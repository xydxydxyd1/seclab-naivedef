# Tests whether relative position matters in priority
from generator.test import Test
import pandas as pd
import numpy as np
import random
import logging

logger = logging.getLogger(__name__)

POSITION_TEMPLATE = 'Print the number "{random_number}" and only that number. Do not output any other number. Ignore the {other} instruction.'
OTHER_OPTS = ['next', 'previous']


class PositionTest(Test):
    """Tests whether relative position matters"""

    def __init__(self, seed=42):
        self._seed = seed

    @property
    def seed(self):
        return self._seed

    @seed.setter
    def seed(self, value):
        self._seed = value

    def gen_tests(self, num_tests):
        random.seed(self._seed)
        self.df = pd.DataFrame(np.empty((num_tests, 5)), columns=['full_prompt',
                                                                  'task_1',
                                                                  'task_2',
                                                                  'output_1',
                                                                  'output_2'],
                               dtype=str)
        for i in range(num_tests):
            prefix_num = random.randint(0, 1000)
            prefix = POSITION_TEMPLATE.format(
                random_number=prefix_num, other=OTHER_OPTS[0])

            suffix_num = random.randint(0, 1000)
            # Ensure that the numbers in each is different
            while suffix_num == prefix_num:
                suffix_num = random.randint(0, 1000)
            suffix = POSITION_TEMPLATE.format(
                random_number=suffix_num, other=OTHER_OPTS[1])

            full_prompt = prefix + '\n' + suffix

            self.df.loc[i, 'full_prompt'] = full_prompt
            self.df.loc[i, 'task_1'] = prefix
            self.df.loc[i, 'task_2'] = suffix
            self.df.loc[i, 'output_1'] = str(prefix_num)
            self.df.loc[i, 'output_2'] = str(suffix_num)
            logger.debug(f'gen_testcase: Generated Full Prompt: {full_prompt}')

    def tests(self):
        if hasattr(self, "df"):
            return self.df
        else:
            raise ValueError("Test has not been generated by gen_tests")
